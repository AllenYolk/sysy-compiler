grammar;

match {
    // ignore the spaces
    r"\s*" => {},
    // comment line prefixed by "//"
    r"//[^\n\r]*[\n\r]" => {},
    // comment block "/*...*/"
    r"/\*[^\*]*\*(\*|[^\*/][^\*]*\*)*/" => {},
    // others
    _
}

pub CompUnit: String = <func_def: FuncDef> => func_def;

FuncDef: String = {
    <func_type: FuncType> <id: Ident> "(" ")" <block: Block> => {
        format!("{} {}() {}", func_type, id, block)
    }
}

FuncType: String = <ft: "int"> => String::from(ft);

Block: String = {
    "{" <stmt: Stmt> "}" => {
        format!("{{ {} }}", stmt)
    }
}

Stmt: String = "return" <num: Number> ";" => format!("return {};", num);

Number: String = <num: IntConst> => num.to_string();

Ident: String = {
    r"[_a-zA-Z][_a-zA-Z0-9]*" => String::from(<>),
}

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[Xx][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}