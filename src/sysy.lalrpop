use crate::ast_generate::ast::*;

grammar;

match {
    // ignore the spaces
    r"\s*" => {},
    // comment line prefixed by "//"
    r"//[^\n\r]*[\n\r]*" => {},
    // comment block "/*...*/"
    r"/\*[^\*]*\*(\*|[^\*/][^\*]*\*)*/" => {},
    // others
    _
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// Non-terminals                                                                                //
//////////////////////////////////////////////////////////////////////////////////////////////////

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { func_def };

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => FuncDef { <> }
}

FuncType: FuncType = {
    <ft: "int"> => FuncType::Int,
    <ft: "void"> => FuncType::Void,
}

// use the `*` macro of `lalrpop`
Block: Block = "{" <items: (<BlockItem>)*> "}" => Block { items };

BlockItem: BlockItem = {
    <stmt: Stmt> => BlockItem::Stmt(stmt),
    <decl: Decl> => BlockItem::Decl(decl),
}

/// Avoid the "dangling else" problem: "else" is matched to the nearest "if" before it.
/// Hence, if these's a statement between "if" and "else", it must be a closed one (with "if" and "else" paired)!
/// Accordingly, we may remove ambiguity by splitting the definition of `Stmt`.
/// For further information, refer to https://en.wikipedia.org/wiki/Dangling_else .
///
///  Stmt ::= ClosedStmt
///         | OpenStmt
Stmt: Stmt = {
    <closed: ClosedStmt> => closed,
    <open: OpenStmt> => open,
}

/// ClosedStmt ::= "if" "(" Exp ")" ClosedStmt "else" ClosedStmt
///              | "while" "(" Exp ")" ClosedStmt
///              | OtherStmt
/// OtherStmt ::= LVal "=" Exp ";"
///              | [Exp] ";"
///              | Block
///              | "break" ";"
///              | "continue" ";"
///              | "return" [Exp] ";";
ClosedStmt: Stmt = {
    <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(lval, exp),
    <exp: (Exp)?> ";" => Stmt::Exp(exp),
    <block: Block> => Stmt::Block(block),
    "if" "(" <cond: Exp> ")" <then: ClosedStmt> "else" <otherwise: ClosedStmt> => {
        Stmt::If(cond, Box::new(then), Some(Box::new(otherwise)))
    },
    "while" "(" <cond: Exp> ")" <body: ClosedStmt> => Stmt::While(cond, Box::new(body)),
    "break" ";" => Stmt::Break,
    "continue" ";" => Stmt::Continue,
    "return" <exp: (Exp)?> ";" => Stmt::Return(exp),
}

/// OpenStmt ::= "if" "(" Exp ")" Stmt
///            | "if" "(" Exp ")" ClosedStmt "else" OpenStmt
///            | "while" "(" Exp ")" OpenStmt
OpenStmt: Stmt = {
    "if" "(" <cond: Exp> ")" <then: Stmt> => Stmt::If(cond, Box::new(then), None),
    "if" "(" <cond: Exp> ")" <then: ClosedStmt> "else" <otherwise: OpenStmt> => {
        Stmt::If(cond, Box::new(then), Some(Box::new(otherwise)))
    },
    "while" "(" <cond: Exp> ")" <body: OpenStmt> => Stmt::While(cond, Box::new(body)),
}

Decl: Decl = {
    <c: ConstDecl> => Decl::Const(c),
    <v: VarDecl> => Decl::Var(v),
}

ConstDecl: ConstDecl = {
    "const" "int" <mut defs: (<ConstDef> ",")*> <def: ConstDef> ";" => {
        defs.push(def);
        ConstDecl { defs }
    }
}

ConstDef: ConstDef = {
    <ident: Ident> "=" <init: ConstInitVal> => ConstDef { ident, init },
}

ConstInitVal: ConstInitVal = {
    <exp: ConstExp> => ConstInitVal::Exp(exp),
}

VarDecl: VarDecl = {
    "int" <mut defs: (<VarDef> ",")*> <def: VarDef> ";" => {
        defs.push(def);
        VarDecl { defs }
    }
}

VarDef: VarDef = {
    <ident: Ident> <init: ("=" <InitVal>)?> => VarDef { ident, init },
}

InitVal: InitVal = {
    <exp: Exp> => InitVal::Exp(exp),
}

// Expressions

ConstExp: ConstExp = <exp: Exp> => ConstExp { exp };

Exp: Exp = <exp: LOrExp> => Exp { exp };

LOrExp: LOrExp = {
    <land: LAndExp> => LOrExp::LAnd(land),
    <lor: LOrExp> "||" <land: LAndExp> => LOrExp::LOrLAnd(Box::new(lor), land),
}

LAndExp: LAndExp = {
    <eq: EqExp> => LAndExp::Eq(eq),
    <land: LAndExp> "&&" <eq: EqExp> => LAndExp::LAndEq(Box::new(land), eq),
}

EqExp: EqExp = {
    <rel: RelExp> => EqExp::Rel(rel),
    <eq: EqExp> <op: EqExpOp> <rel: RelExp> => EqExp::EqRel(Box::new(eq), op, rel),
}

RelExp: RelExp = {
    <add: AddExp> => RelExp::Add(add),
    <rel: RelExp> <op: RelExpOp> <add: AddExp> => RelExp::RelAdd(Box::new(rel), op, add),
}

AddExp: AddExp = {
    <mul: MulExp> => AddExp::Mul(mul),
    <add: AddExp> <op: AddExpOp> <mul: MulExp> => AddExp::AddMul(Box::new(add), op, mul),
}

MulExp: MulExp = {
    <unary: UnaryExp> => MulExp::Unary(unary),
    <mul: MulExp> <op: MulExpOp> <unary: UnaryExp> => MulExp::MulUnary(Box::new(mul), op, unary),
}

UnaryExp: UnaryExp = {
    <primary: PrimaryExp> => UnaryExp::Primary(primary),
    <uop: UnaryExpOp> <uexp: UnaryExp> => UnaryExp::Unary(uop, Box::new(uexp)),
}

PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new(exp)),
    <lval: LVal> => PrimaryExp::LVal(lval),
    <num: IntConst> => PrimaryExp::Num(num),
}

LVal: LVal = <ident: Ident> => LVal{ ident };

// Operators

EqExpOp: EqExpOp = {
    "==" => EqExpOp::Eq,
    "!=" => EqExpOp::Neq,
}

RelExpOp: RelExpOp = {
    "<=" => RelExpOp::Le,
    ">=" => RelExpOp::Ge,
    "<" => RelExpOp::Lt,
    ">" => RelExpOp::Gt,
}

AddExpOp: AddExpOp = {
    "+" => AddExpOp::Add,
    "-" => AddExpOp::Sub,
}

MulExpOp: MulExpOp = {
    "*" => MulExpOp::Mul,
    "/" => MulExpOp::Div,
    "%" => MulExpOp::Mod,
}

UnaryExpOp: UnaryExpOp = {
    "+" => UnaryExpOp::Pos,
    "-" => UnaryExpOp::Neg,
    "!" => UnaryExpOp::Not,
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// Terminals                                                                                    //
//////////////////////////////////////////////////////////////////////////////////////////////////

Ident: String = {
    r"[_a-zA-Z][_a-zA-Z0-9]*" => String::from(<>),
}

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[Xx][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}