use crate::astgen::ast::*;

grammar;

match {
    // ignore the spaces
    r"\s*" => {},
    // comment line prefixed by "//"
    r"//[^\n\r]*[\n\r]" => {},
    // comment block "/*...*/"
    r"/\*[^\*]*\*(\*|[^\*/][^\*]*\*)*/" => {},
    // others
    _
}

// Variables

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { func_def };

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => FuncDef { <> }
}

FuncType: FuncType = <ft: "int"> => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { stmt };

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { exp };

Exp: Exp = <exp: UnaryExp> => Exp { exp };

UnaryExp: UnaryExp = {
    <primary: PrimaryExp> => UnaryExp::Primary(primary),
    <uop: UnaryOp> <uexp: UnaryExp> => UnaryExp::Unary(uop, Box::new(uexp)),
}

PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new(exp)),
    <num: Number> => PrimaryExp::Num(num),
}

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Pos,
    "-" => UnaryOp::Neg,
    "!" => UnaryOp::Not,
}

Number: i32 = <num: IntConst> => num;

// Terminals

Ident: String = {
    r"[_a-zA-Z][_a-zA-Z0-9]*" => String::from(<>),
}

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[Xx][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}