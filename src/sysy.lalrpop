use crate::astgen::ast::*;

grammar;

match {
    // ignore the spaces
    r"\s*" => {},
    // comment line prefixed by "//"
    r"//[^\n\r]*[\n\r]*" => {},
    // comment block "/*...*/"
    r"/\*[^\*]*\*(\*|[^\*/][^\*]*\*)*/" => {},
    // others
    _
}

// Variables

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { func_def };

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => FuncDef { <> }
}

FuncType: FuncType = <ft: "int"> => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { stmt };

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { exp };

// Variables - Expressions

Exp: Exp = <exp: LOrExp> => Exp { exp };

LOrExp: LOrExp = {
    <land: LAndExp> => LOrExp::LAnd(land),
    <lor: LOrExp> "||" <land: LAndExp> => LOrExp::LOrLAnd(Box::new(lor), land),
}

LAndExp: LAndExp = {
    <eq: EqExp> => LAndExp::Eq(eq),
    <land: LAndExp> "&&" <eq: EqExp> => LAndExp::LAndEq(Box::new(land), eq),
}

EqExp: EqExp = {
    <rel: RelExp> => EqExp::Rel(rel),
    <eq: EqExp> <op: EqExpOp> <rel: RelExp> => EqExp::EqRel(Box::new(eq), op, rel),
}

RelExp: RelExp = {
    <add: AddExp> => RelExp::Add(add),
    <rel: RelExp> <op: RelExpOp> <add: AddExp> => RelExp::RelAdd(Box::new(rel), op, add),
}

AddExp: AddExp = {
    <mul: MulExp> => AddExp::Mul(mul),
    <add: AddExp> <op: AddExpOp> <mul: MulExp> => AddExp::AddMul(Box::new(add), op, mul),
}

MulExp: MulExp = {
    <unary: UnaryExp> => MulExp::Unary(unary),
    <mul: MulExp> <op: MulExpOp> <unary: UnaryExp> => MulExp::MulUnary(Box::new(mul), op, unary),
}

UnaryExp: UnaryExp = {
    <primary: PrimaryExp> => UnaryExp::Primary(primary),
    <uop: UnaryExpOp> <uexp: UnaryExp> => UnaryExp::Unary(uop, Box::new(uexp)),
}

PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new(exp)),
    <num: Number> => PrimaryExp::Num(num),
}

// Variables - Operators

EqExpOp: EqExpOp = {
    "==" => EqExpOp::Eq,
    "!=" => EqExpOp::Neq,
}

RelExpOp: RelExpOp = {
    "<=" => RelExpOp::Le,
    ">=" => RelExpOp::Ge,
    "<" => RelExpOp::Lt,
    ">" => RelExpOp::Gt,
}

AddExpOp: AddExpOp = {
    "+" => AddExpOp::Add,
    "-" => AddExpOp::Sub,
}

MulExpOp: MulExpOp = {
    "*" => MulExpOp::Mul,
    "/" => MulExpOp::Div,
    "%" => MulExpOp::Mod,
}

UnaryExpOp: UnaryExpOp = {
    "+" => UnaryExpOp::Pos,
    "-" => UnaryExpOp::Neg,
    "!" => UnaryExpOp::Not,
}

Number: i32 = <num: IntConst> => num;

// Terminals

Ident: String = {
    r"[_a-zA-Z][_a-zA-Z0-9]*" => String::from(<>),
}

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[Xx][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}